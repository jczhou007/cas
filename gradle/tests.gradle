def isJdbc(Project project) {
    project.name =~ /jpa/ || project.name =~ /jdbc/
}

task testCassandra(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.CassandraCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && project.name =~ /cassandra/ && "CASSANDRA".equalsIgnoreCase(rootProject.testCategoryType)
}

task testCosmosDb(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.CosmosDbCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && project.name =~ /cosmos/ && "COSMOSDB".equalsIgnoreCase(rootProject.testCategoryType)
}

task testCouchbase(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.CouchbaseCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && project.name =~ /couchbase/ && "COUCHBASE".equalsIgnoreCase(rootProject.testCategoryType)
}

task testCouchDb(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.CouchDbCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && project.name =~ /couchdb/ && "COUCHDB".equalsIgnoreCase(rootProject.testCategoryType)
}

task testMySQL(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.MySQLCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && isJdbc(project) && "MYSQL".equalsIgnoreCase(rootProject.testCategoryType)
}

task testPostgres(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.PostgresCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && isJdbc(project) && "POSTGRES".equalsIgnoreCase(rootProject.testCategoryType)
}

task testMsSqlServer(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.MsSqlServerCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && isJdbc(project) && "MSSQLSERVER".equalsIgnoreCase(rootProject.testCategoryType)
}

task testMariaDb(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.MariaDbCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && isJdbc(project) && "MARIADB".equalsIgnoreCase(rootProject.testCategoryType)
}


task testDynamoDb(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.DynamoDbCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && project.name =~ /dynamodb/ && "DYNAMODB".equalsIgnoreCase(rootProject.testCategoryType)
}

task testFileSystem(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.FileSystemCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && "FILESYSTEM".equalsIgnoreCase(rootProject.testCategoryType)
}

task testIgnite(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.IgniteCategory"
    }
    def list = []
    list.add("--add-exports")
    list.add("java.base/jdk.internal.misc=ALL-UNNAMED")
    list.add("--add-exports")
    list.add("java.base/sun.nio.ch=ALL-UNNAMED")
    jvmArgs = list
    enabled = !Boolean.getBoolean("skipTests") && project.name =~ /ignite/ && "IGNITE".equalsIgnoreCase(rootProject.testCategoryType)
}

task testInfluxDb(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.InfluxDbCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && project.name =~ /influxdb/ && "INFLUXDB".equalsIgnoreCase(rootProject.testCategoryType)
}

task testLdap(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.LdapCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && "LDAP".equalsIgnoreCase(rootProject.testCategoryType)
}

task testMail(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.MailCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && "MAIL".equalsIgnoreCase(rootProject.testCategoryType)
}

task testRestful(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.RestfulApiCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && "RESTFUL".equalsIgnoreCase(rootProject.testCategoryType)
}

task testMemcached(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.MemcachedCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && project.name =~ /memcached/ && "MEMCACHED".equalsIgnoreCase(rootProject.testCategoryType)
}

task testMongoDb(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.MongoDbCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && project.name =~ /mongo/ && "MONGODB".equalsIgnoreCase(rootProject.testCategoryType)
}

task testRedis(type: Test) {
    useJUnit {
        includeCategories "org.apereo.cas.category.RedisCategory"
    }
    enabled = !Boolean.getBoolean("skipTests") && project.name =~ /redis/ && "REDIS".equalsIgnoreCase(rootProject.testCategoryType)
}

test {
    include "**/*Tests.*"
    useJUnit {
        excludeCategories "org.apereo.cas.category.CassandraCategory"
        excludeCategories "org.apereo.cas.category.CosmosDbCategory"
        excludeCategories "org.apereo.cas.category.CouchbaseCategory"
        excludeCategories "org.apereo.cas.category.DynamoDbCategory"
        excludeCategories "org.apereo.cas.category.FileSystemCategory"
        excludeCategories "org.apereo.cas.category.IgniteCategory"
        excludeCategories "org.apereo.cas.category.InfluxDbCategory"
        excludeCategories "org.apereo.cas.category.CouchDbCategory"
        excludeCategories "org.apereo.cas.category.LdapCategory"
        excludeCategories "org.apereo.cas.category.MailCategory"
        excludeCategories "org.apereo.cas.category.MariaDbCategory"
        excludeCategories "org.apereo.cas.category.MemcachedCategory"
        excludeCategories "org.apereo.cas.category.MongoDbCategory"
        excludeCategories "org.apereo.cas.category.MsSqlServerCategory"
        excludeCategories "org.apereo.cas.category.MySQLCategory"
        excludeCategories "org.apereo.cas.category.PostgresCategory"
        excludeCategories "org.apereo.cas.category.RedisCategory"
        excludeCategories "org.apereo.cas.category.RestfulApiCategory"
    }
    onlyIf {
        "SIMPLE".equalsIgnoreCase(rootProject.testCategoryType)
    }
}

task testApi(type: Test) {
    include "**/*Tests.*"
    useJUnit {
        excludeCategories "org.apereo.cas.category.CassandraCategory"
        excludeCategories "org.apereo.cas.category.CosmosDbCategory"
        excludeCategories "org.apereo.cas.category.CouchbaseCategory"
        excludeCategories "org.apereo.cas.category.DynamoDbCategory"
        excludeCategories "org.apereo.cas.category.FileSystemCategory"
        excludeCategories "org.apereo.cas.category.IgniteCategory"
        excludeCategories "org.apereo.cas.category.InfluxDbCategory"
        excludeCategories "org.apereo.cas.category.CouchDbCategory"
        excludeCategories "org.apereo.cas.category.LdapCategory"
        excludeCategories "org.apereo.cas.category.MailCategory"
        excludeCategories "org.apereo.cas.category.MariaDbCategory"
        excludeCategories "org.apereo.cas.category.MemcachedCategory"
        excludeCategories "org.apereo.cas.category.MongoDbCategory"
        excludeCategories "org.apereo.cas.category.MsSqlServerCategory"
        excludeCategories "org.apereo.cas.category.MySQLCategory"
        excludeCategories "org.apereo.cas.category.PostgresCategory"
        excludeCategories "org.apereo.cas.category.RedisCategory"
        excludeCategories "org.apereo.cas.category.RestfulApiCategory"
    }
    onlyIf {
        "SIMPLE".equalsIgnoreCase(rootProject.testCategoryType)
    }
    enabled = !Boolean.getBoolean("skipTests") && project.path.contains(":api")
}

task testCore(type: Test) {
    include "**/*Tests.*"
    useJUnit {
        excludeCategories "org.apereo.cas.category.CassandraCategory"
        excludeCategories "org.apereo.cas.category.CosmosDbCategory"
        excludeCategories "org.apereo.cas.category.CouchbaseCategory"
        excludeCategories "org.apereo.cas.category.DynamoDbCategory"
        excludeCategories "org.apereo.cas.category.FileSystemCategory"
        excludeCategories "org.apereo.cas.category.IgniteCategory"
        excludeCategories "org.apereo.cas.category.InfluxDbCategory"
        excludeCategories "org.apereo.cas.category.CouchDbCategory"
        excludeCategories "org.apereo.cas.category.LdapCategory"
        excludeCategories "org.apereo.cas.category.MailCategory"
        excludeCategories "org.apereo.cas.category.MariaDbCategory"
        excludeCategories "org.apereo.cas.category.MemcachedCategory"
        excludeCategories "org.apereo.cas.category.MongoDbCategory"
        excludeCategories "org.apereo.cas.category.MsSqlServerCategory"
        excludeCategories "org.apereo.cas.category.MySQLCategory"
        excludeCategories "org.apereo.cas.category.PostgresCategory"
        excludeCategories "org.apereo.cas.category.RedisCategory"
        excludeCategories "org.apereo.cas.category.RestfulApiCategory"
    }
    onlyIf {
        "SIMPLE".equalsIgnoreCase(rootProject.testCategoryType)
    }
    enabled = !Boolean.getBoolean("skipTests") && project.path.contains(":core")
}

task testSupport(type: Test) {
    include "**/*Tests.*"
    useJUnit {
        excludeCategories "org.apereo.cas.category.CassandraCategory"
        excludeCategories "org.apereo.cas.category.CosmosDbCategory"
        excludeCategories "org.apereo.cas.category.CouchbaseCategory"
        excludeCategories "org.apereo.cas.category.DynamoDbCategory"
        excludeCategories "org.apereo.cas.category.FileSystemCategory"
        excludeCategories "org.apereo.cas.category.IgniteCategory"
        excludeCategories "org.apereo.cas.category.InfluxDbCategory"
        excludeCategories "org.apereo.cas.category.CouchDbCategory"
        excludeCategories "org.apereo.cas.category.LdapCategory"
        excludeCategories "org.apereo.cas.category.MailCategory"
        excludeCategories "org.apereo.cas.category.MariaDbCategory"
        excludeCategories "org.apereo.cas.category.MemcachedCategory"
        excludeCategories "org.apereo.cas.category.MongoDbCategory"
        excludeCategories "org.apereo.cas.category.MsSqlServerCategory"
        excludeCategories "org.apereo.cas.category.MySQLCategory"
        excludeCategories "org.apereo.cas.category.PostgresCategory"
        excludeCategories "org.apereo.cas.category.RedisCategory"
        excludeCategories "org.apereo.cas.category.RestfulApiCategory"
    }
    onlyIf {
        "SIMPLE".equalsIgnoreCase(rootProject.testCategoryType)
    }
    enabled = !Boolean.getBoolean("skipTests") && project.path.contains(":support")
}

task testWebapp(type: Test) {
    include "**/*Tests.*"
    useJUnit {
        excludeCategories "org.apereo.cas.category.CassandraCategory"
        excludeCategories "org.apereo.cas.category.CosmosDbCategory"
        excludeCategories "org.apereo.cas.category.CouchbaseCategory"
        excludeCategories "org.apereo.cas.category.DynamoDbCategory"
        excludeCategories "org.apereo.cas.category.FileSystemCategory"
        excludeCategories "org.apereo.cas.category.IgniteCategory"
        excludeCategories "org.apereo.cas.category.InfluxDbCategory"
        excludeCategories "org.apereo.cas.category.CouchDbCategory"
        excludeCategories "org.apereo.cas.category.LdapCategory"
        excludeCategories "org.apereo.cas.category.MailCategory"
        excludeCategories "org.apereo.cas.category.MariaDbCategory"
        excludeCategories "org.apereo.cas.category.MemcachedCategory"
        excludeCategories "org.apereo.cas.category.MongoDbCategory"
        excludeCategories "org.apereo.cas.category.MsSqlServerCategory"
        excludeCategories "org.apereo.cas.category.MySQLCategory"
        excludeCategories "org.apereo.cas.category.PostgresCategory"
        excludeCategories "org.apereo.cas.category.RedisCategory"
        excludeCategories "org.apereo.cas.category.RestfulApiCategory"
    }
    onlyIf {
        "SIMPLE".equalsIgnoreCase(rootProject.testCategoryType)
    }
    enabled = !Boolean.getBoolean("skipTests") && project.path.contains(":webapp")
}

tasks.withType(Test) {
    exclude "**/Abstract*.*", "**/Base*.*", "**/*Suite.*"
    scanForTestClasses = false
    ignoreFailures = Boolean.getBoolean("ignoreTestFailures")
    maxParallelForks = 1
    failFast = true
    jvmArgs "-Xmx1024m"
    classpath = it.classpath + files("${projectDir}/src/main/resources") + files("${projectDir}/src/test/resources")
    testLogging {
        events = ["FAILED", "STANDARD_OUT"]
        exceptionFormat = "full"
        showStandardStreams = Boolean.getBoolean("showStandardStreams")
        showExceptions = true
        showCauses = true
    }
}
